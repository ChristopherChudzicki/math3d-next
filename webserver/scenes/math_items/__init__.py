# Code generated by jtd-codegen for Python v0.3.1

import re
from dataclasses import dataclass
from datetime import datetime, timedelta, timezone
from enum import Enum
from typing import Any, Dict, List, Optional, Type, Union, get_args, get_origin


@dataclass
class MathItems:
    value: "List[MathItem]"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItems":
        return cls(_from_json_data(List[MathItem], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)


@dataclass
class ItemPropertiesAxis:
    axis: "PropAxis"
    color: "str"
    description: "str"
    divisions: "str"
    end: "str"
    label: "str"
    label_visible: "str"
    max: "str"
    min: "str"
    opacity: "str"
    scale: "str"
    size: "str"
    start: "str"
    ticks_visible: "str"
    visible: "str"
    width: "str"
    z_bias: "str"
    z_index: "str"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesAxis":
        return cls(
            _from_json_data(PropAxis, data.get("axis")),
            _from_json_data(str, data.get("color")),
            _from_json_data(str, data.get("description")),
            _from_json_data(str, data.get("divisions")),
            _from_json_data(str, data.get("end")),
            _from_json_data(str, data.get("label")),
            _from_json_data(str, data.get("labelVisible")),
            _from_json_data(str, data.get("max")),
            _from_json_data(str, data.get("min")),
            _from_json_data(str, data.get("opacity")),
            _from_json_data(str, data.get("scale")),
            _from_json_data(str, data.get("size")),
            _from_json_data(str, data.get("start")),
            _from_json_data(str, data.get("ticksVisible")),
            _from_json_data(str, data.get("visible")),
            _from_json_data(str, data.get("width")),
            _from_json_data(str, data.get("zBias")),
            _from_json_data(str, data.get("zIndex")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["axis"] = _to_json_data(self.axis)
        data["color"] = _to_json_data(self.color)
        data["description"] = _to_json_data(self.description)
        data["divisions"] = _to_json_data(self.divisions)
        data["end"] = _to_json_data(self.end)
        data["label"] = _to_json_data(self.label)
        data["labelVisible"] = _to_json_data(self.label_visible)
        data["max"] = _to_json_data(self.max)
        data["min"] = _to_json_data(self.min)
        data["opacity"] = _to_json_data(self.opacity)
        data["scale"] = _to_json_data(self.scale)
        data["size"] = _to_json_data(self.size)
        data["start"] = _to_json_data(self.start)
        data["ticksVisible"] = _to_json_data(self.ticks_visible)
        data["visible"] = _to_json_data(self.visible)
        data["width"] = _to_json_data(self.width)
        data["zBias"] = _to_json_data(self.z_bias)
        data["zIndex"] = _to_json_data(self.z_index)
        return data


@dataclass
class ItemPropertiesBooleanVariable:
    description: "str"
    value: "ParseableAssignment"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesBooleanVariable":
        return cls(
            _from_json_data(str, data.get("description")),
            _from_json_data(ParseableAssignment, data.get("value")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["description"] = _to_json_data(self.description)
        data["value"] = _to_json_data(self.value)
        return data


@dataclass
class ItemPropertiesCamera:
    description: "str"
    is_orthographic: "str"
    is_pan_enabled: "str"
    is_rotate_enabled: "str"
    is_zoom_enabled: "str"
    position: "str"
    target: "str"
    update_on_drag: "str"
    use_relative: "str"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesCamera":
        return cls(
            _from_json_data(str, data.get("description")),
            _from_json_data(str, data.get("isOrthographic")),
            _from_json_data(str, data.get("isPanEnabled")),
            _from_json_data(str, data.get("isRotateEnabled")),
            _from_json_data(str, data.get("isZoomEnabled")),
            _from_json_data(str, data.get("position")),
            _from_json_data(str, data.get("target")),
            _from_json_data(str, data.get("updateOnDrag")),
            _from_json_data(str, data.get("useRelative")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["description"] = _to_json_data(self.description)
        data["isOrthographic"] = _to_json_data(self.is_orthographic)
        data["isPanEnabled"] = _to_json_data(self.is_pan_enabled)
        data["isRotateEnabled"] = _to_json_data(self.is_rotate_enabled)
        data["isZoomEnabled"] = _to_json_data(self.is_zoom_enabled)
        data["position"] = _to_json_data(self.position)
        data["target"] = _to_json_data(self.target)
        data["updateOnDrag"] = _to_json_data(self.update_on_drag)
        data["useRelative"] = _to_json_data(self.use_relative)
        return data


@dataclass
class ItemPropertiesExplicitSurface:
    color: "str"
    color_expr: "str"
    description: "str"
    domain: "ParseableFunctionAssignmentArray"
    expr: "ParseableFunctionAssignment"
    grid1: "str"
    grid2: "str"
    grid_opacity: "str"
    grid_width: "str"
    opacity: "str"
    samples1: "str"
    samples2: "str"
    shaded: "str"
    visible: "str"
    z_bias: "str"
    z_index: "str"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesExplicitSurface":
        return cls(
            _from_json_data(str, data.get("color")),
            _from_json_data(str, data.get("colorExpr")),
            _from_json_data(str, data.get("description")),
            _from_json_data(ParseableFunctionAssignmentArray, data.get("domain")),
            _from_json_data(ParseableFunctionAssignment, data.get("expr")),
            _from_json_data(str, data.get("grid1")),
            _from_json_data(str, data.get("grid2")),
            _from_json_data(str, data.get("gridOpacity")),
            _from_json_data(str, data.get("gridWidth")),
            _from_json_data(str, data.get("opacity")),
            _from_json_data(str, data.get("samples1")),
            _from_json_data(str, data.get("samples2")),
            _from_json_data(str, data.get("shaded")),
            _from_json_data(str, data.get("visible")),
            _from_json_data(str, data.get("zBias")),
            _from_json_data(str, data.get("zIndex")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["color"] = _to_json_data(self.color)
        data["colorExpr"] = _to_json_data(self.color_expr)
        data["description"] = _to_json_data(self.description)
        data["domain"] = _to_json_data(self.domain)
        data["expr"] = _to_json_data(self.expr)
        data["grid1"] = _to_json_data(self.grid1)
        data["grid2"] = _to_json_data(self.grid2)
        data["gridOpacity"] = _to_json_data(self.grid_opacity)
        data["gridWidth"] = _to_json_data(self.grid_width)
        data["opacity"] = _to_json_data(self.opacity)
        data["samples1"] = _to_json_data(self.samples1)
        data["samples2"] = _to_json_data(self.samples2)
        data["shaded"] = _to_json_data(self.shaded)
        data["visible"] = _to_json_data(self.visible)
        data["zBias"] = _to_json_data(self.z_bias)
        data["zIndex"] = _to_json_data(self.z_index)
        return data


@dataclass
class ItemPropertiesFolder:
    description: "str"
    is_collapsed: "str"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesFolder":
        return cls(
            _from_json_data(str, data.get("description")),
            _from_json_data(str, data.get("isCollapsed")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["description"] = _to_json_data(self.description)
        data["isCollapsed"] = _to_json_data(self.is_collapsed)
        return data


@dataclass
class ItemPropertiesGrid:
    axes: "PropAxes"
    color: "str"
    description: "str"
    divisions: "str"
    opacity: "str"
    snap: "str"
    visible: "str"
    width: "str"
    z_bias: "str"
    z_index: "str"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesGrid":
        return cls(
            _from_json_data(PropAxes, data.get("axes")),
            _from_json_data(str, data.get("color")),
            _from_json_data(str, data.get("description")),
            _from_json_data(str, data.get("divisions")),
            _from_json_data(str, data.get("opacity")),
            _from_json_data(str, data.get("snap")),
            _from_json_data(str, data.get("visible")),
            _from_json_data(str, data.get("width")),
            _from_json_data(str, data.get("zBias")),
            _from_json_data(str, data.get("zIndex")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["axes"] = _to_json_data(self.axes)
        data["color"] = _to_json_data(self.color)
        data["description"] = _to_json_data(self.description)
        data["divisions"] = _to_json_data(self.divisions)
        data["opacity"] = _to_json_data(self.opacity)
        data["snap"] = _to_json_data(self.snap)
        data["visible"] = _to_json_data(self.visible)
        data["width"] = _to_json_data(self.width)
        data["zBias"] = _to_json_data(self.z_bias)
        data["zIndex"] = _to_json_data(self.z_index)
        return data


@dataclass
class ItemPropertiesImplicitSurface:
    color: "str"
    description: "str"
    domain: "ParseableExprArray"
    lhs: "ParseableFunctionAssignment"
    opacity: "str"
    rhs: "ParseableFunctionAssignment"
    samples: "str"
    shaded: "str"
    visible: "str"
    z_bias: "str"
    z_index: "str"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesImplicitSurface":
        return cls(
            _from_json_data(str, data.get("color")),
            _from_json_data(str, data.get("description")),
            _from_json_data(ParseableExprArray, data.get("domain")),
            _from_json_data(ParseableFunctionAssignment, data.get("lhs")),
            _from_json_data(str, data.get("opacity")),
            _from_json_data(ParseableFunctionAssignment, data.get("rhs")),
            _from_json_data(str, data.get("samples")),
            _from_json_data(str, data.get("shaded")),
            _from_json_data(str, data.get("visible")),
            _from_json_data(str, data.get("zBias")),
            _from_json_data(str, data.get("zIndex")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["color"] = _to_json_data(self.color)
        data["description"] = _to_json_data(self.description)
        data["domain"] = _to_json_data(self.domain)
        data["lhs"] = _to_json_data(self.lhs)
        data["opacity"] = _to_json_data(self.opacity)
        data["rhs"] = _to_json_data(self.rhs)
        data["samples"] = _to_json_data(self.samples)
        data["shaded"] = _to_json_data(self.shaded)
        data["visible"] = _to_json_data(self.visible)
        data["zBias"] = _to_json_data(self.z_bias)
        data["zIndex"] = _to_json_data(self.z_index)
        return data


@dataclass
class ItemPropertiesLine:
    color: "str"
    coords: "str"
    description: "str"
    end: "str"
    label: "str"
    label_visible: "str"
    opacity: "str"
    size: "str"
    start: "str"
    visible: "str"
    width: "str"
    z_bias: "str"
    z_index: "str"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesLine":
        return cls(
            _from_json_data(str, data.get("color")),
            _from_json_data(str, data.get("coords")),
            _from_json_data(str, data.get("description")),
            _from_json_data(str, data.get("end")),
            _from_json_data(str, data.get("label")),
            _from_json_data(str, data.get("labelVisible")),
            _from_json_data(str, data.get("opacity")),
            _from_json_data(str, data.get("size")),
            _from_json_data(str, data.get("start")),
            _from_json_data(str, data.get("visible")),
            _from_json_data(str, data.get("width")),
            _from_json_data(str, data.get("zBias")),
            _from_json_data(str, data.get("zIndex")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["color"] = _to_json_data(self.color)
        data["coords"] = _to_json_data(self.coords)
        data["description"] = _to_json_data(self.description)
        data["end"] = _to_json_data(self.end)
        data["label"] = _to_json_data(self.label)
        data["labelVisible"] = _to_json_data(self.label_visible)
        data["opacity"] = _to_json_data(self.opacity)
        data["size"] = _to_json_data(self.size)
        data["start"] = _to_json_data(self.start)
        data["visible"] = _to_json_data(self.visible)
        data["width"] = _to_json_data(self.width)
        data["zBias"] = _to_json_data(self.z_bias)
        data["zIndex"] = _to_json_data(self.z_index)
        return data


@dataclass
class ItemPropertiesParametricCurve:
    color: "str"
    description: "str"
    domain: "ParseableExprArray"
    end: "str"
    expr: "ParseableFunctionAssignment"
    opacity: "str"
    samples1: "str"
    size: "str"
    start: "str"
    visible: "str"
    width: "str"
    z_bias: "str"
    z_index: "str"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesParametricCurve":
        return cls(
            _from_json_data(str, data.get("color")),
            _from_json_data(str, data.get("description")),
            _from_json_data(ParseableExprArray, data.get("domain")),
            _from_json_data(str, data.get("end")),
            _from_json_data(ParseableFunctionAssignment, data.get("expr")),
            _from_json_data(str, data.get("opacity")),
            _from_json_data(str, data.get("samples1")),
            _from_json_data(str, data.get("size")),
            _from_json_data(str, data.get("start")),
            _from_json_data(str, data.get("visible")),
            _from_json_data(str, data.get("width")),
            _from_json_data(str, data.get("zBias")),
            _from_json_data(str, data.get("zIndex")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["color"] = _to_json_data(self.color)
        data["description"] = _to_json_data(self.description)
        data["domain"] = _to_json_data(self.domain)
        data["end"] = _to_json_data(self.end)
        data["expr"] = _to_json_data(self.expr)
        data["opacity"] = _to_json_data(self.opacity)
        data["samples1"] = _to_json_data(self.samples1)
        data["size"] = _to_json_data(self.size)
        data["start"] = _to_json_data(self.start)
        data["visible"] = _to_json_data(self.visible)
        data["width"] = _to_json_data(self.width)
        data["zBias"] = _to_json_data(self.z_bias)
        data["zIndex"] = _to_json_data(self.z_index)
        return data


@dataclass
class ItemPropertiesParametricSurface:
    color: "str"
    color_expr: "str"
    description: "str"
    domain: "ParseableFunctionAssignmentArray"
    expr: "ParseableFunctionAssignment"
    grid1: "str"
    grid2: "str"
    grid_opacity: "str"
    grid_width: "str"
    opacity: "str"
    samples1: "str"
    samples2: "str"
    shaded: "str"
    visible: "str"
    z_bias: "str"
    z_index: "str"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesParametricSurface":
        return cls(
            _from_json_data(str, data.get("color")),
            _from_json_data(str, data.get("colorExpr")),
            _from_json_data(str, data.get("description")),
            _from_json_data(ParseableFunctionAssignmentArray, data.get("domain")),
            _from_json_data(ParseableFunctionAssignment, data.get("expr")),
            _from_json_data(str, data.get("grid1")),
            _from_json_data(str, data.get("grid2")),
            _from_json_data(str, data.get("gridOpacity")),
            _from_json_data(str, data.get("gridWidth")),
            _from_json_data(str, data.get("opacity")),
            _from_json_data(str, data.get("samples1")),
            _from_json_data(str, data.get("samples2")),
            _from_json_data(str, data.get("shaded")),
            _from_json_data(str, data.get("visible")),
            _from_json_data(str, data.get("zBias")),
            _from_json_data(str, data.get("zIndex")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["color"] = _to_json_data(self.color)
        data["colorExpr"] = _to_json_data(self.color_expr)
        data["description"] = _to_json_data(self.description)
        data["domain"] = _to_json_data(self.domain)
        data["expr"] = _to_json_data(self.expr)
        data["grid1"] = _to_json_data(self.grid1)
        data["grid2"] = _to_json_data(self.grid2)
        data["gridOpacity"] = _to_json_data(self.grid_opacity)
        data["gridWidth"] = _to_json_data(self.grid_width)
        data["opacity"] = _to_json_data(self.opacity)
        data["samples1"] = _to_json_data(self.samples1)
        data["samples2"] = _to_json_data(self.samples2)
        data["shaded"] = _to_json_data(self.shaded)
        data["visible"] = _to_json_data(self.visible)
        data["zBias"] = _to_json_data(self.z_bias)
        data["zIndex"] = _to_json_data(self.z_index)
        return data


@dataclass
class ItemPropertiesPoint:
    color: "str"
    coords: "str"
    description: "str"
    label: "str"
    label_visible: "str"
    opacity: "str"
    size: "str"
    visible: "str"
    z_bias: "str"
    z_index: "str"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesPoint":
        return cls(
            _from_json_data(str, data.get("color")),
            _from_json_data(str, data.get("coords")),
            _from_json_data(str, data.get("description")),
            _from_json_data(str, data.get("label")),
            _from_json_data(str, data.get("labelVisible")),
            _from_json_data(str, data.get("opacity")),
            _from_json_data(str, data.get("size")),
            _from_json_data(str, data.get("visible")),
            _from_json_data(str, data.get("zBias")),
            _from_json_data(str, data.get("zIndex")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["color"] = _to_json_data(self.color)
        data["coords"] = _to_json_data(self.coords)
        data["description"] = _to_json_data(self.description)
        data["label"] = _to_json_data(self.label)
        data["labelVisible"] = _to_json_data(self.label_visible)
        data["opacity"] = _to_json_data(self.opacity)
        data["size"] = _to_json_data(self.size)
        data["visible"] = _to_json_data(self.visible)
        data["zBias"] = _to_json_data(self.z_bias)
        data["zIndex"] = _to_json_data(self.z_index)
        return data


@dataclass
class ItemPropertiesVariable:
    description: "str"
    value: "ParseableAssignment"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesVariable":
        return cls(
            _from_json_data(str, data.get("description")),
            _from_json_data(ParseableAssignment, data.get("value")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["description"] = _to_json_data(self.description)
        data["value"] = _to_json_data(self.value)
        return data


@dataclass
class ItemPropertiesVariableSlider:
    description: "str"
    duration: "str"
    fps: "str"
    is_animating: "str"
    range: "ParseableStringArray"
    speed_multiplier: "str"
    value: "ParseableAssignment"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesVariableSlider":
        return cls(
            _from_json_data(str, data.get("description")),
            _from_json_data(str, data.get("duration")),
            _from_json_data(str, data.get("fps")),
            _from_json_data(str, data.get("isAnimating")),
            _from_json_data(ParseableStringArray, data.get("range")),
            _from_json_data(str, data.get("speedMultiplier")),
            _from_json_data(ParseableAssignment, data.get("value")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["description"] = _to_json_data(self.description)
        data["duration"] = _to_json_data(self.duration)
        data["fps"] = _to_json_data(self.fps)
        data["isAnimating"] = _to_json_data(self.is_animating)
        data["range"] = _to_json_data(self.range)
        data["speedMultiplier"] = _to_json_data(self.speed_multiplier)
        data["value"] = _to_json_data(self.value)
        return data


@dataclass
class ItemPropertiesVector:
    color: "str"
    components: "str"
    description: "str"
    end: "str"
    label: "str"
    label_visible: "str"
    opacity: "str"
    size: "str"
    start: "str"
    tail: "str"
    visible: "str"
    width: "str"
    z_bias: "str"
    z_index: "str"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesVector":
        return cls(
            _from_json_data(str, data.get("color")),
            _from_json_data(str, data.get("components")),
            _from_json_data(str, data.get("description")),
            _from_json_data(str, data.get("end")),
            _from_json_data(str, data.get("label")),
            _from_json_data(str, data.get("labelVisible")),
            _from_json_data(str, data.get("opacity")),
            _from_json_data(str, data.get("size")),
            _from_json_data(str, data.get("start")),
            _from_json_data(str, data.get("tail")),
            _from_json_data(str, data.get("visible")),
            _from_json_data(str, data.get("width")),
            _from_json_data(str, data.get("zBias")),
            _from_json_data(str, data.get("zIndex")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["color"] = _to_json_data(self.color)
        data["components"] = _to_json_data(self.components)
        data["description"] = _to_json_data(self.description)
        data["end"] = _to_json_data(self.end)
        data["label"] = _to_json_data(self.label)
        data["labelVisible"] = _to_json_data(self.label_visible)
        data["opacity"] = _to_json_data(self.opacity)
        data["size"] = _to_json_data(self.size)
        data["start"] = _to_json_data(self.start)
        data["tail"] = _to_json_data(self.tail)
        data["visible"] = _to_json_data(self.visible)
        data["width"] = _to_json_data(self.width)
        data["zBias"] = _to_json_data(self.z_bias)
        data["zIndex"] = _to_json_data(self.z_index)
        return data


@dataclass
class ItemPropertiesVectorField:
    color: "str"
    description: "str"
    domain: "ParseableExprArray"
    end: "str"
    expr: "ParseableFunctionAssignment"
    opacity: "str"
    samples1: "str"
    samples2: "str"
    samples3: "str"
    scale: "str"
    size: "str"
    start: "str"
    visible: "str"
    width: "str"
    z_bias: "str"
    z_index: "str"

    @classmethod
    def from_json_data(cls, data: Any) -> "ItemPropertiesVectorField":
        return cls(
            _from_json_data(str, data.get("color")),
            _from_json_data(str, data.get("description")),
            _from_json_data(ParseableExprArray, data.get("domain")),
            _from_json_data(str, data.get("end")),
            _from_json_data(ParseableFunctionAssignment, data.get("expr")),
            _from_json_data(str, data.get("opacity")),
            _from_json_data(str, data.get("samples1")),
            _from_json_data(str, data.get("samples2")),
            _from_json_data(str, data.get("samples3")),
            _from_json_data(str, data.get("scale")),
            _from_json_data(str, data.get("size")),
            _from_json_data(str, data.get("start")),
            _from_json_data(str, data.get("visible")),
            _from_json_data(str, data.get("width")),
            _from_json_data(str, data.get("zBias")),
            _from_json_data(str, data.get("zIndex")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["color"] = _to_json_data(self.color)
        data["description"] = _to_json_data(self.description)
        data["domain"] = _to_json_data(self.domain)
        data["end"] = _to_json_data(self.end)
        data["expr"] = _to_json_data(self.expr)
        data["opacity"] = _to_json_data(self.opacity)
        data["samples1"] = _to_json_data(self.samples1)
        data["samples2"] = _to_json_data(self.samples2)
        data["samples3"] = _to_json_data(self.samples3)
        data["scale"] = _to_json_data(self.scale)
        data["size"] = _to_json_data(self.size)
        data["start"] = _to_json_data(self.start)
        data["visible"] = _to_json_data(self.visible)
        data["width"] = _to_json_data(self.width)
        data["zBias"] = _to_json_data(self.z_bias)
        data["zIndex"] = _to_json_data(self.z_index)
        return data


@dataclass
class MathItem:
    type: "str"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItem":
        variants: Dict[str, Type[MathItem]] = {
            "AXIS": MathItemAxis,
            "BOOLEAN_VARIABLE": MathItemBooleanVariable,
            "CAMERA": MathItemCamera,
            "EXPLICIT_SURFACE": MathItemExplicitSurface,
            "EXPLICIT_SURFACE_POLAR": MathItemExplicitSurfacePolar,
            "FOLDER": MathItemFolder,
            "GRID": MathItemGrid,
            "IMPLICIT_SURFACE": MathItemImplicitSurface,
            "LINE": MathItemLine,
            "PARAMETRIC_CURVE": MathItemParametricCurve,
            "PARAMETRIC_SURFACE": MathItemParametricSurface,
            "POINT": MathItemPoint,
            "VARIABLE": MathItemVariable,
            "VARIABLE_SLIDER": MathItemVariableSlider,
            "VECTOR": MathItemVector,
            "VECTOR_FIELD": MathItemVectorField,
        }

        return variants[data["type"]].from_json_data(data)

    def to_json_data(self) -> Any:
        pass


@dataclass
class MathItemAxis(MathItem):
    id: "str"
    properties: "ItemPropertiesAxis"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemAxis":
        return cls(
            "AXIS",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesAxis, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "AXIS"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemBooleanVariable(MathItem):
    id: "str"
    properties: "ItemPropertiesBooleanVariable"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemBooleanVariable":
        return cls(
            "BOOLEAN_VARIABLE",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesBooleanVariable, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "BOOLEAN_VARIABLE"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemCamera(MathItem):
    id: "str"
    properties: "ItemPropertiesCamera"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemCamera":
        return cls(
            "CAMERA",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesCamera, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "CAMERA"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemExplicitSurface(MathItem):
    id: "str"
    properties: "ItemPropertiesExplicitSurface"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemExplicitSurface":
        return cls(
            "EXPLICIT_SURFACE",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesExplicitSurface, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "EXPLICIT_SURFACE"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemExplicitSurfacePolar(MathItem):
    id: "str"
    properties: "ItemPropertiesExplicitSurface"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemExplicitSurfacePolar":
        return cls(
            "EXPLICIT_SURFACE_POLAR",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesExplicitSurface, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "EXPLICIT_SURFACE_POLAR"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemFolder(MathItem):
    id: "str"
    properties: "ItemPropertiesFolder"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemFolder":
        return cls(
            "FOLDER",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesFolder, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "FOLDER"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemGrid(MathItem):
    id: "str"
    properties: "ItemPropertiesGrid"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemGrid":
        return cls(
            "GRID",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesGrid, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "GRID"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemImplicitSurface(MathItem):
    id: "str"
    properties: "ItemPropertiesImplicitSurface"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemImplicitSurface":
        return cls(
            "IMPLICIT_SURFACE",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesImplicitSurface, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "IMPLICIT_SURFACE"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemLine(MathItem):
    id: "str"
    properties: "ItemPropertiesLine"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemLine":
        return cls(
            "LINE",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesLine, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "LINE"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemParametricCurve(MathItem):
    id: "str"
    properties: "ItemPropertiesParametricCurve"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemParametricCurve":
        return cls(
            "PARAMETRIC_CURVE",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesParametricCurve, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "PARAMETRIC_CURVE"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemParametricSurface(MathItem):
    id: "str"
    properties: "ItemPropertiesParametricSurface"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemParametricSurface":
        return cls(
            "PARAMETRIC_SURFACE",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesParametricSurface, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "PARAMETRIC_SURFACE"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemPoint(MathItem):
    id: "str"
    properties: "ItemPropertiesPoint"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemPoint":
        return cls(
            "POINT",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesPoint, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "POINT"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemVariable(MathItem):
    id: "str"
    properties: "ItemPropertiesVariable"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemVariable":
        return cls(
            "VARIABLE",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesVariable, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "VARIABLE"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemVariableSlider(MathItem):
    id: "str"
    properties: "ItemPropertiesVariableSlider"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemVariableSlider":
        return cls(
            "VARIABLE_SLIDER",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesVariableSlider, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "VARIABLE_SLIDER"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemVector(MathItem):
    id: "str"
    properties: "ItemPropertiesVector"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemVector":
        return cls(
            "VECTOR",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesVector, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "VECTOR"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


@dataclass
class MathItemVectorField(MathItem):
    id: "str"
    properties: "ItemPropertiesVectorField"

    @classmethod
    def from_json_data(cls, data: Any) -> "MathItemVectorField":
        return cls(
            "VECTOR_FIELD",
            _from_json_data(str, data.get("id")),
            _from_json_data(ItemPropertiesVectorField, data.get("properties")),
        )

    def to_json_data(self) -> Any:
        data = {"type": "VECTOR_FIELD"}
        data["id"] = _to_json_data(self.id)
        data["properties"] = _to_json_data(self.properties)
        return data


class ParseableAssignmentType(Enum):
    ASSIGNMENT = "assignment"

    @classmethod
    def from_json_data(cls, data: Any) -> "ParseableAssignmentType":
        return cls(data)

    def to_json_data(self) -> Any:
        return self.value


@dataclass
class ParseableAssignment:
    lhs: "str"
    rhs: "str"
    type: "ParseableAssignmentType"

    @classmethod
    def from_json_data(cls, data: Any) -> "ParseableAssignment":
        return cls(
            _from_json_data(str, data.get("lhs")),
            _from_json_data(str, data.get("rhs")),
            _from_json_data(ParseableAssignmentType, data.get("type")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["lhs"] = _to_json_data(self.lhs)
        data["rhs"] = _to_json_data(self.rhs)
        data["type"] = _to_json_data(self.type)
        return data


class ParseableExprType(Enum):
    EXPR = "expr"

    @classmethod
    def from_json_data(cls, data: Any) -> "ParseableExprType":
        return cls(data)

    def to_json_data(self) -> Any:
        return self.value


@dataclass
class ParseableExpr:
    expr: "str"
    type: "ParseableExprType"

    @classmethod
    def from_json_data(cls, data: Any) -> "ParseableExpr":
        return cls(
            _from_json_data(str, data.get("expr")),
            _from_json_data(ParseableExprType, data.get("type")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["expr"] = _to_json_data(self.expr)
        data["type"] = _to_json_data(self.type)
        return data


class ParseableExprArrayType(Enum):
    ARRAY = "array"

    @classmethod
    def from_json_data(cls, data: Any) -> "ParseableExprArrayType":
        return cls(data)

    def to_json_data(self) -> Any:
        return self.value


@dataclass
class ParseableExprArray:
    items: "List[ParseableExpr]"
    type: "ParseableExprArrayType"

    @classmethod
    def from_json_data(cls, data: Any) -> "ParseableExprArray":
        return cls(
            _from_json_data(List[ParseableExpr], data.get("items")),
            _from_json_data(ParseableExprArrayType, data.get("type")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["items"] = _to_json_data(self.items)
        data["type"] = _to_json_data(self.type)
        return data


class ParseableFunctionAssignmentType(Enum):
    FUNCTION_ASSIGNMENT = "function-assignment"

    @classmethod
    def from_json_data(cls, data: Any) -> "ParseableFunctionAssignmentType":
        return cls(data)

    def to_json_data(self) -> Any:
        return self.value


@dataclass
class ParseableFunctionAssignment:
    name: "str"
    params: "List[str]"
    rhs: "str"
    type: "ParseableFunctionAssignmentType"

    @classmethod
    def from_json_data(cls, data: Any) -> "ParseableFunctionAssignment":
        return cls(
            _from_json_data(str, data.get("name")),
            _from_json_data(List[str], data.get("params")),
            _from_json_data(str, data.get("rhs")),
            _from_json_data(ParseableFunctionAssignmentType, data.get("type")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["name"] = _to_json_data(self.name)
        data["params"] = _to_json_data(self.params)
        data["rhs"] = _to_json_data(self.rhs)
        data["type"] = _to_json_data(self.type)
        return data


class ParseableFunctionAssignmentArrayType(Enum):
    ARRAY = "array"

    @classmethod
    def from_json_data(cls, data: Any) -> "ParseableFunctionAssignmentArrayType":
        return cls(data)

    def to_json_data(self) -> Any:
        return self.value


@dataclass
class ParseableFunctionAssignmentArray:
    items: "List[ParseableFunctionAssignment]"
    type: "ParseableFunctionAssignmentArrayType"

    @classmethod
    def from_json_data(cls, data: Any) -> "ParseableFunctionAssignmentArray":
        return cls(
            _from_json_data(List[ParseableFunctionAssignment], data.get("items")),
            _from_json_data(ParseableFunctionAssignmentArrayType, data.get("type")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["items"] = _to_json_data(self.items)
        data["type"] = _to_json_data(self.type)
        return data


class ParseableStringArrayType(Enum):
    ARRAY = "array"

    @classmethod
    def from_json_data(cls, data: Any) -> "ParseableStringArrayType":
        return cls(data)

    def to_json_data(self) -> Any:
        return self.value


@dataclass
class ParseableStringArray:
    items: "List[str]"
    type: "ParseableStringArrayType"

    @classmethod
    def from_json_data(cls, data: Any) -> "ParseableStringArray":
        return cls(
            _from_json_data(List[str], data.get("items")),
            _from_json_data(ParseableStringArrayType, data.get("type")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["items"] = _to_json_data(self.items)
        data["type"] = _to_json_data(self.type)
        return data


class PropAxes(Enum):
    XY = "xy"
    YZ = "yz"
    ZX = "zx"

    @classmethod
    def from_json_data(cls, data: Any) -> "PropAxes":
        return cls(data)

    def to_json_data(self) -> Any:
        return self.value


class PropAxis(Enum):
    X = "x"
    Y = "y"
    Z = "z"

    @classmethod
    def from_json_data(cls, data: Any) -> "PropAxis":
        return cls(data)

    def to_json_data(self) -> Any:
        return self.value


def _from_json_data(cls: Any, data: Any) -> Any:
    if data is None or cls in [bool, int, float, str, object] or cls is Any:
        return data
    if cls is datetime:
        return _parse_rfc3339(data)
    if get_origin(cls) is Union:
        return _from_json_data(get_args(cls)[0], data)
    if get_origin(cls) is list:
        return [_from_json_data(get_args(cls)[0], d) for d in data]
    if get_origin(cls) is dict:
        return {k: _from_json_data(get_args(cls)[1], v) for k, v in data.items()}
    return cls.from_json_data(data)


def _to_json_data(data: Any) -> Any:
    if data is None or type(data) in [bool, int, float, str, object]:
        return data
    if type(data) is datetime:
        return data.isoformat()
    if type(data) is list:
        return [_to_json_data(d) for d in data]
    if type(data) is dict:
        return {k: _to_json_data(v) for k, v in data.items()}
    return data.to_json_data()


def _parse_rfc3339(s: str) -> datetime:
    datetime_re = r"^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(\.\d+)?([zZ]|((\+|-)(\d{2}):(\d{2})))$"
    match = re.match(datetime_re, s)
    if not match:
        raise ValueError("Invalid RFC3339 date/time", s)

    (year, month, day, hour, minute, second, frac_seconds, offset, *tz) = match.groups()

    frac_seconds_parsed = None
    if frac_seconds:
        frac_seconds_parsed = int(float(frac_seconds) * 1_000_000)
    else:
        frac_seconds_parsed = 0

    tzinfo = None
    if offset == "Z":
        tzinfo = timezone.utc
    else:
        hours = int(tz[2])
        minutes = int(tz[3])
        sign = 1 if tz[1] == "+" else -1

        if minutes not in range(60):
            raise ValueError("minute offset must be in 0..59")

        tzinfo = timezone(timedelta(minutes=sign * (60 * hours + minutes)))

    second_parsed = int(second)
    if second_parsed == 60:
        second_parsed = 59

    return datetime(
        int(year),
        int(month),
        int(day),
        int(hour),
        int(minute),
        second_parsed,
        frac_seconds_parsed,
        tzinfo,
    )
